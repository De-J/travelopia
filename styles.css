:root {
    /*  Last parameter of rgb specifies the transparency.  */
    --g1: rgb(98, 0, 234, 0);
    --g2: rgb(236, 64, 122, 0);
    --g3: rgb(253, 216, 53, 0);
    --height: calc(100vh - 200px);
    font-family: "Segoe UI";
}

* {
    padding: 0;
    margin: 0;
}

body {
    height: 100vh;
    display: flex;
    flex-direction: column;
}

button {
    border: 1px solid #D9D9D9;
    cursor: pointer;
    font: inherit;
    border-radius: 6px;
    padding: 0.25rem;
    color: black;
    background-color: white;
    transition: border 0.5s, color 0.5s;
}

section {
    /*
    Parent needs to have position: relative so that
    child elements with position: absolute inside it can be positioned according to it's boundary.
    */
    position: relative;
    flex-grow: 1;
}

button:hover {
    color: #1677FF;
    border: 1px solid #4096FF;
}

img {
    max-width: 100%;
    height: auto;

    /* removes gap below image due to descendants */
    display: block;

}

header,
footer {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-color: #B9BBB6;
    height: 100px;
}

#container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    position: absolute;

    /*   In order for a child element to be positioned 0px from both top and bottom boundaries of its parent element, it needs to have the height of it's parent. Top, bottom and width in the previous sentence can be replaced with left, right and width respectively. */
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;

    background: linear-gradient(0deg,
            var(--g1) 0% 5%,
            var(--g2) 60%,
            var(--g3) 100%);
}

div#container::before {
    content: "";
    position: absolute;
    width: 100vw;
}

.color {
    --g1: rgb(98, 0, 234, 0.2);
    --g2: rgb(236, 64, 122, 0.2);
    --g3: rgb(253, 216, 53, 0.2);
}